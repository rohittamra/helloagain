name: Hello Again

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      # Taking time - later allow it
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Terraform Output
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform output

  docker_build:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      DOCKER_APP_DIR: cors_application
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/cors-proxy:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        working-directory: ${{ env.DOCKER_APP_DIR }}
        run: |
          echo "creating docker build"
          docker build -t ${{ env.DOCKER_IMAGE }} .
          echo "creating docker push"
          docker push ${{ env.DOCKER_IMAGE }}

  k8s_deploy:
    runs-on: ubuntu-latest
    needs: docker_build
    env:
      TF_WORKING_DIR: terraform
      K8S_DIR: kuberenetes
      AKS_NAME: "helloagain-aks"
      AKS_RG: "helloagain-rg"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --name ${{ env.AKS_NAME }} --resource-group ${{ env.AKS_RG }} --overwrite-existing

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f ${{ env.K8S_DIR }}/deployment.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          kubectl apply -f ${{ env.K8S_DIR }}/hpa.yml

      - name: Get node resource group and list public IPs
        run: |
          NODE_RG=$(az aks show --resource-group ${{ env.AKS_RG }} --name ${{ env.AKS_NAME }} --query nodeResourceGroup -o tsv)
          echo "Node Resource Group: $NODE_RG"
          echo "Listing public IPs in node resource group:"
          az network public-ip list --resource-group $NODE_RG --query "[].{Name:name, IPAddress:ipAddress}" -o table

      - name: Get external IP from kubectl
        id: get_ip
        run: |
          EXTERNAL_IP=$(kubectl get svc cors-proxy -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "external_ip=$EXTERNAL_IP" >> $GITHUB_OUTPUT

      - name: Test external IP
        run: |
          if [ -z "${{ steps.get_ip.outputs.external_ip }}" ]; then
            echo "External IP not assigned yet."
            exit 1
          else
            echo "External IP: ${{ steps.get_ip.outputs.external_ip }}"
            curl http://${{ steps.get_ip.outputs.external_ip }}/health
          fi
